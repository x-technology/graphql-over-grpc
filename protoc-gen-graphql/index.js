#!/usr/bin/env node
const fs = require("fs");
const {
  CodeGeneratorRequest,
  CodeGeneratorResponse,
} = require("google-protobuf/google/protobuf/compiler/plugin_pb");
const protobuf = require("protobufjs");

function generateFile() {
  // console.log('inside')
  // console.log(fs.readFileSync(0).toString())


  const debugFile = new CodeGeneratorResponse.File();
  const file = new CodeGeneratorResponse.File();

  debugFile.setName("debug.log");
  file.setName("schema.gql");

  let debugContent = `// Log generated by protoc-gen-graphql. DO NOT EDIT.`;
  let fileContent = `// Code generated by protoc-gen-graphql. DO NOT EDIT.`;

  const request = CodeGeneratorRequest.deserializeBinary(fs.readFileSync(0));
  const response = new CodeGeneratorResponse();

  request.getProtoFileList().forEach(fileDescriptorProto => {
    debugContent = `${debugContent}\nfile: ${fileDescriptorProto.getName()}`
  })

  protobuf.load("books.proto", function (err, root) {
    if (err) {
      throw err;
    }

    // Obtain a message type
    // console.log(root);
    // const Book = root.lookupType("books.Book");
    // fs.writeFileSync('debug.log', Book.toString())

    fileContent = `${fileContent}\n${JSON.stringify(root.toJSON(), null, 2)}`;
    file.setContent(fileContent);
    response.addFile(file);

    // console.log(1, response.serializeBinary());
    fs.writeFileSync(1, response.serializeBinary());
  });

  debugFile.setContent(debugContent);
  response.addFile(debugFile);
}

generateFile();
