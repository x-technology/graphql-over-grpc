#!/usr/bin/env node
const fs = require("fs");
const {
  CodeGeneratorRequest,
  CodeGeneratorResponse,
} = require("google-protobuf/google/protobuf/compiler/plugin_pb");
const protobuf = require("protobufjs");
const { parse } = require("node:path");

async function generateFile() {
  const debugFile = new CodeGeneratorResponse.File();
  debugFile.setName("debug.log");
  let debugContent = `// Log generated by protoc-gen-graphql. DO NOT EDIT.`;

  const request = CodeGeneratorRequest.deserializeBinary(fs.readFileSync(0));
  const response = new CodeGeneratorResponse();

  const files = request.getProtoFileList();
  for (const protoFile of files) {
    let fileContent = `// Code generated by protoc-gen-graphql. DO NOT EDIT.`;
    debugContent = `${debugContent}\nfile: ${protoFile.getName()}`;

    const schemaFile = new CodeGeneratorResponse.File();
    schemaFile.setName(`${parse(protoFile.getName()).name}.gql`);

    const root = await protobuf.load(protoFile.getName())
    // Obtain a message type
    // console.log(root);
    // const Book = root.lookupType("books.Book");
    // fs.writeFileSync('debug.log', Book.toString())

    fileContent = `${fileContent}\n${JSON.stringify(root.toJSON(), null, 2)}`;
    schemaFile.setContent(fileContent);
    response.addFile(schemaFile);
  }

  debugFile.setContent(debugContent);
  response.addFile(debugFile);

  fs.writeFileSync(1, response.serializeBinary());
}

generateFile();
